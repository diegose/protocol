/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.limitd.ErrorResponse', null, global);
goog.exportSymbol('proto.limitd.ErrorResponse.Type', null, global);
goog.exportSymbol('proto.limitd.PongResponse', null, global);
goog.exportSymbol('proto.limitd.PutResponse', null, global);
goog.exportSymbol('proto.limitd.Response', null, global);
goog.exportSymbol('proto.limitd.StatusResponse', null, global);
goog.exportSymbol('proto.limitd.StatusResponseItem', null, global);
goog.exportSymbol('proto.limitd.TakeResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.limitd.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 2, null, null);
};
goog.inherits(proto.limitd.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.limitd.Response.displayName = 'proto.limitd.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.limitd.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.limitd.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.limitd.Response} msg The msg instance to transform.
 * @return {!Object}
 */
proto.limitd.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getField(msg, 1)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.limitd.Response.extensions, proto.limitd.Response.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.limitd.Response}
 */
proto.limitd.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.limitd.Response;
  return proto.limitd.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.limitd.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.limitd.Response}
 */
proto.limitd.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader, proto.limitd.Response.extensionsBinary,
        proto.limitd.Response.prototype.getExtension,
        proto.limitd.Response.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.limitd.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.limitd.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.limitd.Response} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.limitd.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.limitd.Response.extensionsBinary, proto.limitd.Response.prototype.getExtension);
};


/**
 * required string request_id = 1;
 * @return {string}
 */
proto.limitd.Response.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.limitd.Response.prototype.setRequestId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.limitd.Response.prototype.clearRequestId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.limitd.Response.prototype.hasRequestId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldInfo>}
 */
proto.limitd.Response.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object.<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.limitd.Response.extensionsBinary = {};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.limitd.ErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.limitd.ErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.limitd.ErrorResponse.displayName = 'proto.limitd.ErrorResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.limitd.ErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.limitd.ErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.limitd.ErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.limitd.ErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.limitd.ErrorResponse}
 */
proto.limitd.ErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.limitd.ErrorResponse;
  return proto.limitd.ErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.limitd.ErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.limitd.ErrorResponse}
 */
proto.limitd.ErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.limitd.ErrorResponse.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.limitd.ErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.limitd.ErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.limitd.ErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.limitd.ErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.limitd.ErrorResponse.Type} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.limitd.ErrorResponse.Type = {
  UNKNOWN_BUCKET_TYPE: 1
};


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `response`.
 * @type {!jspb.ExtensionFieldInfo.<!proto.limitd.ErrorResponse>}
 */
proto.limitd.ErrorResponse.response = new jspb.ExtensionFieldInfo(
    100,
    {response: 0},
    proto.limitd.ErrorResponse,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.limitd.ErrorResponse.toObject),
    0);

proto.limitd.Response.extensionsBinary[100] = new jspb.ExtensionFieldBinaryInfo(
    proto.limitd.ErrorResponse.response,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.limitd.ErrorResponse.serializeBinaryToWriter,
    proto.limitd.ErrorResponse.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.limitd.Response.extensions[100] = proto.limitd.ErrorResponse.response;

/**
 * required Type type = 1;
 * @return {!proto.limitd.ErrorResponse.Type}
 */
proto.limitd.ErrorResponse.prototype.getType = function() {
  return /** @type {!proto.limitd.ErrorResponse.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/** @param {!proto.limitd.ErrorResponse.Type} value */
proto.limitd.ErrorResponse.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.limitd.ErrorResponse.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.limitd.ErrorResponse.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `response`.
 * @type {!jspb.ExtensionFieldInfo.<!proto.limitd.ErrorResponse>}
 */
proto.limitd.ErrorResponse.response = new jspb.ExtensionFieldInfo(
    100,
    {response: 0},
    proto.limitd.ErrorResponse,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.limitd.ErrorResponse.toObject),
    0);

proto.limitd.Response.extensionsBinary[100] = new jspb.ExtensionFieldBinaryInfo(
    proto.limitd.ErrorResponse.response,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.limitd.ErrorResponse.serializeBinaryToWriter,
    proto.limitd.ErrorResponse.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.limitd.Response.extensions[100] = proto.limitd.ErrorResponse.response;


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.limitd.TakeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.limitd.TakeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.limitd.TakeResponse.displayName = 'proto.limitd.TakeResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.limitd.TakeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.limitd.TakeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.limitd.TakeResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.limitd.TakeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    conformant: jspb.Message.getField(msg, 1),
    delayed: jspb.Message.getFieldWithDefault(msg, 2, false),
    remaining: jspb.Message.getField(msg, 3),
    reset: jspb.Message.getField(msg, 4),
    limit: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.limitd.TakeResponse}
 */
proto.limitd.TakeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.limitd.TakeResponse;
  return proto.limitd.TakeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.limitd.TakeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.limitd.TakeResponse}
 */
proto.limitd.TakeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConformant(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDelayed(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRemaining(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReset(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.limitd.TakeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.limitd.TakeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.limitd.TakeResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.limitd.TakeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `response`.
 * @type {!jspb.ExtensionFieldInfo.<!proto.limitd.TakeResponse>}
 */
proto.limitd.TakeResponse.response = new jspb.ExtensionFieldInfo(
    101,
    {response: 0},
    proto.limitd.TakeResponse,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.limitd.TakeResponse.toObject),
    0);

proto.limitd.Response.extensionsBinary[101] = new jspb.ExtensionFieldBinaryInfo(
    proto.limitd.TakeResponse.response,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.limitd.TakeResponse.serializeBinaryToWriter,
    proto.limitd.TakeResponse.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.limitd.Response.extensions[101] = proto.limitd.TakeResponse.response;

/**
 * required bool conformant = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.limitd.TakeResponse.prototype.getConformant = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.limitd.TakeResponse.prototype.setConformant = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.limitd.TakeResponse.prototype.clearConformant = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.limitd.TakeResponse.prototype.hasConformant = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool delayed = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.limitd.TakeResponse.prototype.getDelayed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.limitd.TakeResponse.prototype.setDelayed = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.limitd.TakeResponse.prototype.clearDelayed = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.limitd.TakeResponse.prototype.hasDelayed = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 remaining = 3;
 * @return {number}
 */
proto.limitd.TakeResponse.prototype.getRemaining = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.limitd.TakeResponse.prototype.setRemaining = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.limitd.TakeResponse.prototype.clearRemaining = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.limitd.TakeResponse.prototype.hasRemaining = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 reset = 4;
 * @return {number}
 */
proto.limitd.TakeResponse.prototype.getReset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.limitd.TakeResponse.prototype.setReset = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.limitd.TakeResponse.prototype.clearReset = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.limitd.TakeResponse.prototype.hasReset = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 limit = 5;
 * @return {number}
 */
proto.limitd.TakeResponse.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.limitd.TakeResponse.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.limitd.TakeResponse.prototype.clearLimit = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.limitd.TakeResponse.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `response`.
 * @type {!jspb.ExtensionFieldInfo.<!proto.limitd.TakeResponse>}
 */
proto.limitd.TakeResponse.response = new jspb.ExtensionFieldInfo(
    101,
    {response: 0},
    proto.limitd.TakeResponse,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.limitd.TakeResponse.toObject),
    0);

proto.limitd.Response.extensionsBinary[101] = new jspb.ExtensionFieldBinaryInfo(
    proto.limitd.TakeResponse.response,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.limitd.TakeResponse.serializeBinaryToWriter,
    proto.limitd.TakeResponse.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.limitd.Response.extensions[101] = proto.limitd.TakeResponse.response;


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.limitd.PutResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.limitd.PutResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.limitd.PutResponse.displayName = 'proto.limitd.PutResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.limitd.PutResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.limitd.PutResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.limitd.PutResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.limitd.PutResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    remaining: jspb.Message.getField(msg, 1),
    reset: jspb.Message.getField(msg, 2),
    limit: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.limitd.PutResponse}
 */
proto.limitd.PutResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.limitd.PutResponse;
  return proto.limitd.PutResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.limitd.PutResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.limitd.PutResponse}
 */
proto.limitd.PutResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRemaining(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.limitd.PutResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.limitd.PutResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.limitd.PutResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.limitd.PutResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `response`.
 * @type {!jspb.ExtensionFieldInfo.<!proto.limitd.PutResponse>}
 */
proto.limitd.PutResponse.response = new jspb.ExtensionFieldInfo(
    102,
    {response: 0},
    proto.limitd.PutResponse,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.limitd.PutResponse.toObject),
    0);

proto.limitd.Response.extensionsBinary[102] = new jspb.ExtensionFieldBinaryInfo(
    proto.limitd.PutResponse.response,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.limitd.PutResponse.serializeBinaryToWriter,
    proto.limitd.PutResponse.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.limitd.Response.extensions[102] = proto.limitd.PutResponse.response;

/**
 * required int32 remaining = 1;
 * @return {number}
 */
proto.limitd.PutResponse.prototype.getRemaining = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.limitd.PutResponse.prototype.setRemaining = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.limitd.PutResponse.prototype.clearRemaining = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.limitd.PutResponse.prototype.hasRemaining = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 reset = 2;
 * @return {number}
 */
proto.limitd.PutResponse.prototype.getReset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.limitd.PutResponse.prototype.setReset = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.limitd.PutResponse.prototype.clearReset = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.limitd.PutResponse.prototype.hasReset = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 limit = 3;
 * @return {number}
 */
proto.limitd.PutResponse.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.limitd.PutResponse.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.limitd.PutResponse.prototype.clearLimit = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.limitd.PutResponse.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `response`.
 * @type {!jspb.ExtensionFieldInfo.<!proto.limitd.PutResponse>}
 */
proto.limitd.PutResponse.response = new jspb.ExtensionFieldInfo(
    102,
    {response: 0},
    proto.limitd.PutResponse,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.limitd.PutResponse.toObject),
    0);

proto.limitd.Response.extensionsBinary[102] = new jspb.ExtensionFieldBinaryInfo(
    proto.limitd.PutResponse.response,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.limitd.PutResponse.serializeBinaryToWriter,
    proto.limitd.PutResponse.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.limitd.Response.extensions[102] = proto.limitd.PutResponse.response;


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.limitd.StatusResponseItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.limitd.StatusResponseItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.limitd.StatusResponseItem.displayName = 'proto.limitd.StatusResponseItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.limitd.StatusResponseItem.prototype.toObject = function(opt_includeInstance) {
  return proto.limitd.StatusResponseItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.limitd.StatusResponseItem} msg The msg instance to transform.
 * @return {!Object}
 */
proto.limitd.StatusResponseItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    instance: jspb.Message.getField(msg, 1),
    remaining: jspb.Message.getField(msg, 2),
    reset: jspb.Message.getField(msg, 3),
    limit: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.limitd.StatusResponseItem}
 */
proto.limitd.StatusResponseItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.limitd.StatusResponseItem;
  return proto.limitd.StatusResponseItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.limitd.StatusResponseItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.limitd.StatusResponseItem}
 */
proto.limitd.StatusResponseItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRemaining(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReset(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.limitd.StatusResponseItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.limitd.StatusResponseItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.limitd.StatusResponseItem} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.limitd.StatusResponseItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required string instance = 1;
 * @return {string}
 */
proto.limitd.StatusResponseItem.prototype.getInstance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.limitd.StatusResponseItem.prototype.setInstance = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.limitd.StatusResponseItem.prototype.clearInstance = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.limitd.StatusResponseItem.prototype.hasInstance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 remaining = 2;
 * @return {number}
 */
proto.limitd.StatusResponseItem.prototype.getRemaining = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.limitd.StatusResponseItem.prototype.setRemaining = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.limitd.StatusResponseItem.prototype.clearRemaining = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.limitd.StatusResponseItem.prototype.hasRemaining = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 reset = 3;
 * @return {number}
 */
proto.limitd.StatusResponseItem.prototype.getReset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.limitd.StatusResponseItem.prototype.setReset = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.limitd.StatusResponseItem.prototype.clearReset = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.limitd.StatusResponseItem.prototype.hasReset = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 limit = 4;
 * @return {number}
 */
proto.limitd.StatusResponseItem.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.limitd.StatusResponseItem.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.limitd.StatusResponseItem.prototype.clearLimit = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.limitd.StatusResponseItem.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.limitd.StatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.limitd.StatusResponse.repeatedFields_, null);
};
goog.inherits(proto.limitd.StatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.limitd.StatusResponse.displayName = 'proto.limitd.StatusResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.limitd.StatusResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.limitd.StatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.limitd.StatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.limitd.StatusResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.limitd.StatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.limitd.StatusResponseItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.limitd.StatusResponse}
 */
proto.limitd.StatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.limitd.StatusResponse;
  return proto.limitd.StatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.limitd.StatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.limitd.StatusResponse}
 */
proto.limitd.StatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.limitd.StatusResponseItem;
      reader.readMessage(value,proto.limitd.StatusResponseItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.limitd.StatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.limitd.StatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.limitd.StatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.limitd.StatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.limitd.StatusResponseItem.serializeBinaryToWriter
    );
  }
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `response`.
 * @type {!jspb.ExtensionFieldInfo.<!proto.limitd.StatusResponse>}
 */
proto.limitd.StatusResponse.response = new jspb.ExtensionFieldInfo(
    103,
    {response: 0},
    proto.limitd.StatusResponse,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.limitd.StatusResponse.toObject),
    0);

proto.limitd.Response.extensionsBinary[103] = new jspb.ExtensionFieldBinaryInfo(
    proto.limitd.StatusResponse.response,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.limitd.StatusResponse.serializeBinaryToWriter,
    proto.limitd.StatusResponse.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.limitd.Response.extensions[103] = proto.limitd.StatusResponse.response;

/**
 * repeated StatusResponseItem items = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.limitd.StatusResponseItem>}
 */
proto.limitd.StatusResponse.prototype.getItemsList = function() {
  return /** @type{!Array.<!proto.limitd.StatusResponseItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.limitd.StatusResponseItem, 1));
};


/** @param {!Array.<!proto.limitd.StatusResponseItem>} value */
proto.limitd.StatusResponse.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.limitd.StatusResponseItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.limitd.StatusResponseItem}
 */
proto.limitd.StatusResponse.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.limitd.StatusResponseItem, opt_index);
};


proto.limitd.StatusResponse.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `response`.
 * @type {!jspb.ExtensionFieldInfo.<!proto.limitd.StatusResponse>}
 */
proto.limitd.StatusResponse.response = new jspb.ExtensionFieldInfo(
    103,
    {response: 0},
    proto.limitd.StatusResponse,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.limitd.StatusResponse.toObject),
    0);

proto.limitd.Response.extensionsBinary[103] = new jspb.ExtensionFieldBinaryInfo(
    proto.limitd.StatusResponse.response,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.limitd.StatusResponse.serializeBinaryToWriter,
    proto.limitd.StatusResponse.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.limitd.Response.extensions[103] = proto.limitd.StatusResponse.response;


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.limitd.PongResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.limitd.PongResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.limitd.PongResponse.displayName = 'proto.limitd.PongResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.limitd.PongResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.limitd.PongResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.limitd.PongResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.limitd.PongResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.limitd.PongResponse}
 */
proto.limitd.PongResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.limitd.PongResponse;
  return proto.limitd.PongResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.limitd.PongResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.limitd.PongResponse}
 */
proto.limitd.PongResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.limitd.PongResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.limitd.PongResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.limitd.PongResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.limitd.PongResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `response`.
 * @type {!jspb.ExtensionFieldInfo.<!proto.limitd.PongResponse>}
 */
proto.limitd.PongResponse.response = new jspb.ExtensionFieldInfo(
    104,
    {response: 0},
    proto.limitd.PongResponse,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.limitd.PongResponse.toObject),
    0);

proto.limitd.Response.extensionsBinary[104] = new jspb.ExtensionFieldBinaryInfo(
    proto.limitd.PongResponse.response,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.limitd.PongResponse.serializeBinaryToWriter,
    proto.limitd.PongResponse.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.limitd.Response.extensions[104] = proto.limitd.PongResponse.response;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `response`.
 * @type {!jspb.ExtensionFieldInfo.<!proto.limitd.PongResponse>}
 */
proto.limitd.PongResponse.response = new jspb.ExtensionFieldInfo(
    104,
    {response: 0},
    proto.limitd.PongResponse,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.limitd.PongResponse.toObject),
    0);

proto.limitd.Response.extensionsBinary[104] = new jspb.ExtensionFieldBinaryInfo(
    proto.limitd.PongResponse.response,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.limitd.PongResponse.serializeBinaryToWriter,
    proto.limitd.PongResponse.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.limitd.Response.extensions[104] = proto.limitd.PongResponse.response;

goog.object.extend(exports, proto.limitd);
