'use strict'; // code generated by pbf v3.0.5

// ErrorResponse ========================================

var ErrorResponse = exports.ErrorResponse = {};

ErrorResponse.read = function (pbf, end) {
    return pbf.readFields(ErrorResponse._readField, {type: 0}, end);
};
ErrorResponse._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.type = ReverseErrorTypeMap.get(pbf.readVarint());
};
ErrorResponse.write = function (obj, pbf) {
    if (obj.type) pbf.writeVarintField(1, ErrorResponse.Type[obj.type]);
};

ErrorResponse.Type = {
    "UNKNOWN_BUCKET_TYPE": 1
};

const ReverseErrorTypeMap = new Map(Object.keys(ErrorResponse.Type).map(t => [ ErrorResponse.Type[t], t ]));

// TakeResponse ========================================

var TakeResponse = exports.TakeResponse = {};

TakeResponse.read = function (pbf, end) {
    return pbf.readFields(TakeResponse._readField, {conformant: false, delayed: false, remaining: 0, reset: 0, limit: 0}, end);
};
TakeResponse._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.conformant = pbf.readBoolean();
    else if (tag === 2) obj.delayed = pbf.readBoolean();
    else if (tag === 3) obj.remaining = pbf.readVarint(true);
    else if (tag === 4) obj.reset = pbf.readVarint(true);
    else if (tag === 5) obj.limit = pbf.readVarint(true);
};
TakeResponse.write = function (obj, pbf) {
    if (typeof obj.conformant !== 'undefined') pbf.writeBooleanField(1, obj.conformant);
    if (obj.delayed) pbf.writeBooleanField(2, obj.delayed);
    if (obj.remaining) pbf.writeVarintField(3, obj.remaining);
    if (obj.reset) pbf.writeVarintField(4, obj.reset);
    if (obj.limit) pbf.writeVarintField(5, obj.limit);
};

// PutResponse ========================================

var PutResponse = exports.PutResponse = {};

PutResponse.read = function (pbf, end) {
    return pbf.readFields(PutResponse._readField, {remaining: 0, reset: 0, limit: 0}, end);
};
PutResponse._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.remaining = pbf.readVarint(true);
    else if (tag === 2) obj.reset = pbf.readVarint(true);
    else if (tag === 3) obj.limit = pbf.readVarint(true);
};
PutResponse.write = function (obj, pbf) {
    if (obj.remaining) pbf.writeVarintField(1, obj.remaining);
    if (obj.reset) pbf.writeVarintField(2, obj.reset);
    if (obj.limit) pbf.writeVarintField(3, obj.limit);
};

// StatusResponseItem ========================================

var StatusResponseItem = exports.StatusResponseItem = {};

StatusResponseItem.read = function (pbf, end) {
    return pbf.readFields(StatusResponseItem._readField, {instance: "", remaining: 0, reset: 0, limit: 0}, end);
};
StatusResponseItem._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.instance = pbf.readString();
    else if (tag === 2) obj.remaining = pbf.readVarint(true);
    else if (tag === 3) obj.reset = pbf.readVarint(true);
    else if (tag === 4) obj.limit = pbf.readVarint(true);
};
StatusResponseItem.write = function (obj, pbf) {
    if (obj.instance) pbf.writeStringField(1, obj.instance);
    if (obj.remaining) pbf.writeVarintField(2, obj.remaining);
    if (obj.reset) pbf.writeVarintField(3, obj.reset);
    if (obj.limit) pbf.writeVarintField(4, obj.limit);
};

// StatusResponse ========================================

var StatusResponse = exports.StatusResponse = {};

StatusResponse.read = function (pbf, end) {
    return pbf.readFields(StatusResponse._readField, {items: []}, end);
};
StatusResponse._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.items.push(StatusResponseItem.read(pbf, pbf.readVarint() + pbf.pos));
};
StatusResponse.write = function (obj, pbf) {
    if (obj.items) for (var i = 0; i < obj.items.length; i++) pbf.writeMessage(1, StatusResponseItem.write, obj.items[i]);
};

// PongResponse ========================================

var PongResponse = exports.PongResponse = {};

PongResponse.read = function (pbf, end) {
    return pbf.readFields(PongResponse._readField, {}, end);
};
PongResponse._readField = function (tag, obj, pbf) {
};
PongResponse.write = function (obj, pbf) {
};

// Response ========================================

var Response = exports.Response = {};

Response.read = function (pbf, end) {
    return pbf.readFields(Response._readField, {request_id: "", error: null, body: null, take: null, put: null, status: null, pong: null}, end);
};
Response._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.request_id = pbf.readString();
    else if (tag === 100) obj.error = ErrorResponse.read(pbf, pbf.readVarint() + pbf.pos), obj.body = "error";
    else if (tag === 101) obj.take = TakeResponse.read(pbf, pbf.readVarint() + pbf.pos), obj.body = "take";
    else if (tag === 102) obj.put = PutResponse.read(pbf, pbf.readVarint() + pbf.pos), obj.body = "put";
    else if (tag === 103) obj.status = StatusResponse.read(pbf, pbf.readVarint() + pbf.pos), obj.body = "status";
    else if (tag === 104) obj.pong = PongResponse.read(pbf, pbf.readVarint() + pbf.pos), obj.body = "pong";
};
Response.write = function (obj, pbf) {
    if (obj.request_id) pbf.writeStringField(1, obj.request_id);
    if (obj.error) pbf.writeMessage(100, ErrorResponse.write, obj.error);
    if (obj.take) pbf.writeMessage(101, TakeResponse.write, obj.take);
    if (obj.put) pbf.writeMessage(102, PutResponse.write, obj.put);
    if (obj.status) pbf.writeMessage(103, StatusResponse.write, obj.status);
    if (obj.pong) pbf.writeMessage(104, PongResponse.write, obj.pong);
};
