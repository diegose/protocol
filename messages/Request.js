'use strict'; // code generated by pbf v3.0.5

// Request ========================================

var Request = exports.Request = {};

Request.read = function (pbf, end) {
    return pbf.readFields(Request._readField, {id: "", type: "", key: "", method: 0, count: 1, all: false}, end);
};
Request._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.id = pbf.readString();
    else if (tag === 2) obj.type = pbf.readString();
    else if (tag === 3) obj.key = pbf.readString();
    else if (tag === 4) obj.method = ReverseMethodMap.get(pbf.readVarint());
    else if (tag === 5) obj.count = pbf.readVarint(true);
    else if (tag === 6) obj.all = pbf.readBoolean();
};
Request.write = function (obj, pbf) {
    if (obj.id) pbf.writeStringField(1, obj.id);
    if (obj.type) pbf.writeStringField(2, obj.type);
    if (obj.key) pbf.writeStringField(3, obj.key);
    if (obj.method) pbf.writeVarintField(4, this.Method[obj.method]);
    if (obj.count != undefined && obj.count !== 1) pbf.writeVarintField(5, obj.count);
    if (obj.all) pbf.writeBooleanField(6, obj.all);
};

Request.Method = {
    "TAKE": 0,
    "WAIT": 1,
    "PUT": 2,
    "STATUS": 3,
    "PING": 4
};


const ReverseMethodMap = new Map(Object.keys(Request.Method).map(m => [ Request.Method[m], m ]));
