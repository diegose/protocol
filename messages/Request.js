'use strict'; // code generated by pbf v3.0.5

// Request ========================================
const PBF = require('pbf');
const LRU = require('hashlru');


var Request = exports.Request = {};

Request.read = function (pbf, end) {
    return pbf.readFields(Request._readField, {
        id:      "",
        type:    "",
        key:     "",
        method:  0,
        count:   1,
        all:     false,
        skipResponse: false
    }, end);
};

Request._readField = function (tag, obj, pbf) {
    switch(tag) {
        case 1:
            obj.id = pbf.readString();
            break;
        case 2:
            obj.type = pbf.readString();
            break;
        case 3:
            obj.key = pbf.readString();
            break;
        case 4:
            obj.method = ReverseMethodMap[pbf.readVarint()];
            break;
        case 5:
            obj.count = pbf.readVarint(true);
            break;
        case 6:
            obj.all = pbf.readBoolean();
            break;
        case 7:
            obj.skipResponse = pbf.readBoolean();
            break;
        case 20:
            obj.id = pbf.readVarint(true);
            break;
    }
};

Request.write = function (obj, pbf) {
    if (typeof obj.id === 'number') {
        pbf.writeVarintField(20, obj.id);
    } else if(typeof obj.id === 'string') {
        pbf.writeStringField(1, obj.id);
    }
    pbf.writeBytesField(2, tryGet(typeCache, obj.type));
    pbf.writeBytesField(3, tryGet(keyCache, obj.key));
    if (obj.method) {
        pbf.writeVarintField(4, this.Method[obj.method]);
    }
    if (typeof obj.count !== 'undefined' && obj.count !== 1) {
        pbf.writeVarintField(5, obj.count);
    }
    if (obj.all) {
        pbf.writeBooleanField(6, obj.all);
    }
    if (obj.skipResponse) {
        pbf.writeBooleanField(7, obj.skipResponse);
    }
};

Request.Method = {
    "TAKE":   0,
    "WAIT":   1,
    "PUT":    2,
    "STATUS": 3,
    "PING":   4,
    "GET":    5
};

const ReverseMethodMap = Object.keys(Request.Method).reduce((result, key) => {
    result[Request.Method[key]] = key;
    return result;
}, {});

const typeCache = new LRU(100);
const keyCache = new LRU(100);

function tryGet(cache, key) {
    return cache.get(key) || cache.set(key, getUTF8(key));
}

function getUTF8(str) {
    const pbfTmp = new PBF();
    pbfTmp.writeStringField(1, str);
    pbfTmp.pos = 1;
    return pbfTmp.readBytes();
}
